#!/bin/bash
#the option flags
optspec=":-:hi:o:n:p:sr:"

#specify to which file error and output should be written
ERRORFILE=/home/jan-pieter/hotspot_error_file

#default the in and out to the wifi-port and set a default name and password
IN=wlp2s0
OUT=wlp2s0
NETWORKNAME="eduroam314"
PASSWORD="12345679"

#initialize some booleans
START=0
STOP=0
STOPALL=0
RANDOM_PASSWORD=0

#initialize the password length
LENGTH=12

#regex to validate numerical arguments
NRCHECK='^[0-9]+$'

#a function to show the syntax of the script
function showSyntax {
	echo "this is a frontend for create_ap, it is used to create hotspots, flags are
	-i [input-internet-port]
	-o [output-internet-port]
	-n [network-name]
	-p [password]
	-r [random-password-of-given-length-arg]
	--start: to start a new hotspot
	--stop: to stop all running instances on the input-internet-ports
	--stop-all-running: to stop all running instances on all internet-ports
	--list-options: to list all network interfaces availible to use
	--list-running: to list all currently running instances in create_ap
	--random-password: to get a random password with length given with option r, default length is $LENGTH"
	exit $1
}

#list all the optional interfaces for the device
function list_options {
	ip addr | grep "^[0-9]: [a-zA-Z0-9]*: <" | sed 's/^[0-9]*: \([a-zA-Z0-9]*\).*$/\1/g' | sed ':a;N;$!ba;s/\n/, /g'
}

function stop_on_instance {
	sudo create_ap --stop $1
}

while getopts $optspec arg
do
	case $arg in #process the flags provided in $optspec
		-)
		case "${OPTARG}" in
			list-options) list_options; exit ;;
			list-running) create_ap --list-running; exit ;;
			start) START=1 ;;
			stop) STOP=1 ;;
			stop-all-running) STOPALL=1 ;;
			random-password) RANDOM_PASSWORD=1 ;;
		esac ;;
		h) showSyntax 0 ;;
		i) IN=$OPTARG ;;
		o) OUT=$OPTARG ;;
		n) NETWORKNAME=$OPTARG ;;
		p) PASSWORD=$OPTARG ;;
		r) RANDOM_PASSWORD=1
		   if [[ $OPTARG =~ $NRCHECK ]] ; then LENGTH=$((10#$OPTARG))
		   else
			echo "invalid length, default value $LENGTH used instead"
		   fi ;;
		s) STOP=1 ;;
		\?) showSyntax 1 ;;
	esac
done

#stop all running instances on all input-internet-ports 
if [ $((STOPALL)) -eq 1 ]
then
	to_stop=$(list_options | sed 's/, /\n/g')
	for instance in $to_stop
	do
		stop_on_instance $instance
	done
	exit
fi

#change the password to a random string if asked
if [ $(($RANDOM_PASSWORD)) -eq 1 ]
then
	PASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w $LENGTH | head -n 1)
fi

#if it's not indicated to either start or stop, show the syntax
if [ $(($START)) -eq 0 ] && [ $(($STOP)) -eq 0 ]
then
	showSyntax 0
fi

#stop any current running hotspot on the $IN port
stop_on_instance $IN

#if a hotspot needs to be started, start it using the provided or default arguments
if [ $(($START)) -eq 1 ]
then
	echo "" &>> $ERRORFILE
	echo "$(date)" &>> $ERRORFILE
	echo "Your network will go from '$IN' to '$OUT', it will have the name '$NETWORKNAME' and password '$PASSWORD'"
	sudo create_ap --daemon $IN $OUT $NETWORKNAME $PASSWORD &>> $ERRORFILE
	echo "All output and error will be writen to $ERRORFILE"
else
	echo "Your current running networks will stop on interface: $IN"
fi

#if it didn't happen yet, exit the script
exit
