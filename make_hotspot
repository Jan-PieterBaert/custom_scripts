#!/bin/env python3
import argparse
import random
import re
import string
import subprocess

import pythonFunctions

default_input = "wlp2s0"
default_output = "wlp2s0"
default_network = "eduroam314"
default_password = "12345679"
random_password = False
default_errorfile = "/home/jan-pieter/hotspot_error_file"
default_random_length = 12

parser = argparse.ArgumentParser()
group1 = parser.add_mutually_exclusive_group()
group2 = parser.add_mutually_exclusive_group()
parser.add_argument("-i", "--input-internet-port",
                    help="specifiy which internet port should be used to receive the internet",
                    default=default_input)
parser.add_argument("-o", "--output-internet-port",
                    help="specifiy which internet port should be used to send the internet",
                    default=default_output)
parser.add_argument("-n", "--network-name", help="specify what the name of the network should be",
                    default=default_network)
group1.add_argument("-p", "--password", help="specify what the password should be",
                    default=default_password)
parser.add_argument("--errorfile", help="specify to which errorfile errors and output should be written",
                    default=default_errorfile)
group2.add_argument("--list-options", action="store_true",
                    help="list all options for the network-interfaces")
group2.add_argument("--list-running", action="store_true",
                    help="list all running hotspots")
group1.add_argument("--random-password", action="store_true",
                    help="get a random password, with given length or default {}".format(default_random_length))
parser.add_argument("--random-password-length",
                    help="give the length",
                    default=default_random_length, type=int)
group2.add_argument("--start", action="store_true",
                    help="start the hotspot on the input-interface, first stopping all networks on that interface")
group2.add_argument("--stop", action="store_true",
                    help="stop all networks on the input-interface")
group2.add_argument("--stop-all-running", action="store_true",
                    help="stop all networks on all interfaces")
args = parser.parse_args()


def list_ips():
    try:
        byteStuff = subprocess.check_output(["ip addr | grep '^[0-9][0-9]*: [a-zA-Z0-9]*:' "], shell=True)
        ip_list = byteStuff.decode('UTF-8').rstrip().split("\n")
        return (re.sub(': .*$', "", re.sub('^[0-9]*: ', "", ip, flags=re.IGNORECASE), re.IGNORECASE)
                for ip in ip_list)
    except subprocess.CalledProcessError as e:
        print("An error occured", e.output)
        return ()


def list_running():
    subprocess.call("create_ap --list-running", shell=True)


def randomized_password(length=12):
    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))


def start_hotspot():
    stop_hotspot(args.input_internet_port)
    subprocess.call("echo \"\" &>> {errorfile};"
                    "echo \"$(date)\" &>> {errorfile};"
                    "echo \"Your network will go from \'{input}\' to \'{output}\', it will have the name \'{networkname}\' and password \'{password}\'\";"
                    "sudo create_ap --daemon {input} {output} {networkname} {password} &>> {errorfile};	"
                    "echo \"All output and error will be writen to {errorfile}\";"
                    .format(errorfile=args.errorfile, input=args.input_internet_port, output=args.output_internet_port,
                            networkname=args.network_name, password=args.password), shell=True)


def stop_hotspot(interface):
    subprocess.call("sudo create_ap --stop {}".format(interface), shell=True)


def stop_all():
    for ip in list_ips():
        stop_hotspot(ip)


if args.list_options:
    print(", ".join(list_ips()))
if args.list_running:
    list_running()
if args.random_password:
    args.password = pythonFunctions.randomString(args.random_password_length)
if args.start:
    start_hotspot()
elif args.stop:
    stop_hotspot(args.input_internet_port)
elif args.stop_all_running:
    stop_all()
