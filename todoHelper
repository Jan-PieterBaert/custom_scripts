#!/bin/env python3
import doctest
import pythonFunctions
import argparse
import re
import time
import subprocess
from operator import attrgetter

defaultFile = "/fast_files/git_repos/personal_stuff/todo.md"

parser = argparse.ArgumentParser()

group1 = parser.add_mutually_exclusive_group()
group1.add_argument("--add", help="Add a new item", action="store_true")
group1.add_argument("--remove-first", help="Remove the first item making sure you want to remove it",
                    action="store_true")
group1.add_argument("--list", help="List all todos", action="store_true")
group1.add_argument("--remove", help="Remove the item at certain indices", type=int, nargs="*")
group1.add_argument("--remove-interactive", help="List all items and decide whether to remove or not",
                    action="store_true")

parser.add_argument("--test", help="Run the doctests to see if everything is still fine", action="store_true")
parser.add_argument("--date", help="The date of the todo")
parser.add_argument("--priority", help="The priority of the todo (0-4)", type=int)
parser.add_argument("--description", help="The description of the todo")
parser.add_argument("--category", help="The category of the todo")
args = parser.parse_args()


class TodoItem:
    """
    This is a class to represent a todoItem
    >>> TodoItem("| Din 26/2/2019 | 4 | Verjaardag | Varia |")
    Todoitem: "| Tue 26/02/2019 | 4 | Verjaardag | Varia |"
    >>> TodoItem("| Din 26/2/2019 | 4 | Verjaardag |")
    Traceback (most recent call last):
        ...
    AssertionError
    """

    def __init__(self, line):
        elements = list(filter(None, [element.strip() for element in line.strip().split("|")]))
        assert len(elements) == 4
        self._date = time.strptime(elements[0].split(" ")[-1], "%d/%m/%Y")
        self.prio = elements[1]
        assert 0 <= int(self.prio) <= 4
        self.description = elements[2]
        self.category = elements[3]

    def __eq__(self, other):
        """
        Compare 2 todoItems, equality is based on hash, because that is different for item which are not the same
        """
        return hash(self) == hash(other)

    def __hash__(self):
        """
        The hash value is the hash of the string, because the string differs for every instance which is different
        """
        return hash(str(self))

    def __repr__(self):
        return "Todoitem: \"{}\"".format(str(self))

    def __str__(self):
        return "| {} | {} | {} | {} |".format(self.datestr, self.prio, self.description, self.category)

    @property
    def datestr(self):
        return time.strftime("%a %d/%m/%Y", self._date)

    @property
    def date(self):
        return self._date


def findStartEnd(fileName):
    """
    Find the start and end of the todofiles.
    >>> findStartEnd("todoTestFile1")
    (4, 42)
    >>> findStartEnd("todoTestFile2")
    Traceback (most recent call last):
        ...
    AssertionError
    """
    startIndex = 0
    endIndex = 0
    with open(fileName) as file:
        i = 0
        for line in file:
            i += 1
            if re.match("<!-- CalendarStart -->", line.rstrip("\n")):
                startIndex = i
            if re.match("<!-- CalendarEnd -->", line.rstrip("\n")):
                endIndex = i

    assert startIndex < endIndex

    return startIndex + 1, endIndex - 1


def getSortedTodos(fileName, newTodos=None):
    """
    Get the todos of a certain file, sorted by date, then priority, then description and then category.
    >>> getSortedTodos("todoTestFile1")
    [Todoitem: "| Sat 02/02/2019 | 0 | Belangrijk ding | Groep1 |", Todoitem: "| Mon 11/02/2019 | 1 | Start studeren | Groep3 |", Todoitem: "| Mon 11/02/2019 | 2 | Vergadering fso | Groeprft32yguqw |", Todoitem: "| Mon 11/02/2019 | 3 | Start studeren | Groep10 |", Todoitem: "| Mon 11/02/2019 | 4 | Start studeren | Groep520 |"]
    >>> getSortedTodos("todoTestFile2")
    Traceback (most recent call last):
        ...
    AssertionError
    """
    newTodos = newTodos if newTodos else list()
    startIndex, endIndex = findStartEnd(fileName)
    lineFound = False
    i = 0
    with open(fileName) as file:
        for line in file:
            i += 1
            if i < startIndex + 1 or i > endIndex:
                continue

            if lineFound and len(line.strip()):
                newTodos.append(TodoItem(line))

            if re.sub("[|: -]*", "", line):
                lineFound = True
    return sorted(set(newTodos), key=attrgetter("date", "prio", "category", "description"))


def addTodo(fileName, date="", prio=4, description="", category=""):
    """
    Add a new todoItem to the list of todos
    >>> addTodo("todoTestFile1", "1/2/2019", 0, "testtest", "Varia")
    [Todoitem: "| Fri 01/02/2019 | 0 | testtest | Varia |", Todoitem: "| Sat 02/02/2019 | 0 | Belangrijk ding | Groep1 |", Todoitem: "| Mon 11/02/2019 | 1 | Start studeren | Groep3 |", Todoitem: "| Mon 11/02/2019 | 2 | Vergadering fso | Groeprft32yguqw |", Todoitem: "| Mon 11/02/2019 | 3 | Start studeren | Groep10 |", Todoitem: "| Mon 11/02/2019 | 4 | Start studeren | Groep520 |"]
    """
    newTodo = TodoItem("{}|{}|{}|{}".format(date, prio, description, category))
    return getSortedTodos(fileName, [newTodo])


def fitTodosInFile(fileName, middle):
    """
    Fit the todos, listed as strings in middle
    """
    front = []
    back = ["\n"]
    i = 0
    startIndex, endIndex = findStartEnd(fileName)
    with open(fileName) as file:
        for line in file:
            if i <= startIndex:
                front.append(line)
            if i >= endIndex:
                back.append(line)
            i += 1
    return front + ["{}\n".format(a) for a in middle] + back


def editFileAdd(fileName):
    """
    Edit a file with an addition of a new todoItem
    """
    return fitTodosInFile(fileName, addTodo(fileName, args.date, args.priority, args.description, args.category))


def editFileRemove(fileName, indices):
    """
    Edit a file with a deletion of todoItems (indices listed in indices parameter
    """
    todos = getSortedTodos(fileName)
    indices = set(indices if indices else range(len(todos)))
    removed = 0
    for index in indices:
        removedTodo = todos[index - removed]
        if pythonFunctions.query_yes_no("Sure you want to remove {}".format(removedTodo), default="no"):
            todos.remove(removedTodo)
            removed += 1
    return fitTodosInFile(fileName, todos)


if args.test:
    doctest.testmod()
elif args.remove_first:
    pythonFunctions.writeToFile(editFileRemove(defaultFile, [0]), defaultFile)
elif args.remove is not None:
    pythonFunctions.writeToFile(editFileRemove(defaultFile, args.remove), defaultFile)
elif args.list:
    print("Todos: datum|prio|uitleg|categorie")
    print("\n".join([str(s) for s in getSortedTodos(defaultFile)]))
elif args.add:
    pythonFunctions.writeToFile(editFileAdd(defaultFile), defaultFile)
else:
    parser.print_help()
