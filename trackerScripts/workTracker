#!/bin/env python3
import doctest
import argparse
import re
import time

import pythonFunctions as pythonFunctions
from operator import attrgetter

defaultFile = "/fast_files/git_repos/Personal-random-stuff/todo.md"
defaultName = "Tracker"

parser = argparse.ArgumentParser()

group1 = parser.add_mutually_exclusive_group()
group1.add_argument("--add", help="Add a new item", action="store_true")
group1.add_argument("--remove-first", help="Remove the first item making sure you want to remove it",
                    action="store_true")
group1.add_argument("--list", help="List all todos", action="store_true")
group1.add_argument("--remove", help="Remove the item at certain indices", type=int, nargs="*")
group1.add_argument("--remove-interactive", help="List all items and decide whether to remove or not",
                    action="store_true")
group1.add_argument("--week-total", help="List week totals", action="store_true")

parser.add_argument("--test", help="Run the doctests to see if everything is still fine", action="store_true")
parser.add_argument("--date", help="The date of the workitem", default=time.strftime("%a %d/%m/%Y", time.localtime()))
parser.add_argument("--time", help="The time spent on the workitem, in minutes", type=int)
parser.add_argument("--description", help="The description of the workitem")
parser.add_argument("--course", help="The category of the workitem")
args = parser.parse_args()


class WorkItem:
    def __init__(self, line):
        elements = list(filter(None, [element.strip() for element in line.strip().split("|")]))
        assert len(elements) == 4
        self.date = time.strptime(elements[0].split(" ")[-1], "%d/%m/%Y")
        self.course = elements[1].lower()
        self.description = elements[2]
        self.time = int(elements[3])

    def __eq__(self, other):
        """
        Compare 2 todoItems, equality is based on hash, because that is different for item which are not the same
        """
        return hash(self) == hash(other)

    def __hash__(self):
        """
        The hash value is the hash of the string, because the string differs for every instance which is different
        """
        return hash(str(self))

    def __repr__(self):
        return "\"{}\"".format(str(self))

    def __str__(self):
        return "| {} | {} | {} | {} |".format(self.datestr, self.course, self.description, self.time)

    @property
    def datestr(self):
        return time.strftime("%a %d/%m/%Y", self.date)

    def getCourse(self):
        return self.course

    def getLength(self):
        return self.time


def findStartEnd(fileName):
    return pythonFunctions.findStartEnd(fileName, defaultName)


def getSortedWorkItems(fileName, newWorkItems=None):
    return sorted(pythonFunctions.getItems(fileName, WorkItem, defaultName, newWorkItems),
                  key=attrgetter("date", "course", "description"))


def addWorkItem(fileName, date, length, description, course):
    """
    Add a new workitem to the list of workitems
    """
    newTodo = WorkItem("{}|{}|{}|{}".format(date, course, description, length))
    return getSortedWorkItems(fileName, [newTodo])


def getWeekTotal(fileName):
    def weekNumber(item):
        return time.strftime("%Y%W", time.strptime(item.datestr, "%a %d/%m/%Y"))

    def weekNumberToMonday(item):
        return time.strftime("%d/%m/%Y", time.strptime(str(item) + "-1", "%Y%W-%w"))

    lines = []
    items = getSortedWorkItems(fileName)
    dictio = dict()
    for item in items:
        number = weekNumber(item)
        dictio[number] = dictio.get(number, list()) + [item]

    courses = sorted({item.getCourse() for item in items})
    firstLine = "| week | "
    for key in courses:
        firstLine += " {} | ".format(key)
    firstLine += " total |"
    lines.append(firstLine)

    for key in sorted(dictio.keys()):
        l = [sum(i.getLength() * int(i.getCourse() == j) for i in dictio[key]) for j in courses]
        lines.append("| {} | {} | {} |".format(weekNumberToMonday(key), " | ".join(str(i) for i in l), sum(l)))
    return lines


def getCourseTotal(fileName):
    def course(item):
        return item.getCourse()

    lines = []
    items = getSortedWorkItems(fileName)
    dictio = dict()
    for item in items:
        number = course(item)
        dictio[number] = dictio.get(number, list()) + [item]

    courses = sorted({item.getCourse() for item in items})
    firstLine = "| "
    for key in courses:
        firstLine += " {} | ".format(key)
    firstLine += " total |"
    lines.append(firstLine)

    lastLine = ""
    print(dictio.keys())
    for key in sorted(dictio.keys()):
        l = [sum(i.getLength() * int(i.getCourse() == j) for i in dictio[key]) for j in courses]
        lastLine += "| {} | {} |".format(" | ".join(str(i) for i in l), sum(l))
    lines.append(lastLine)
    return lines


items = getSortedWorkItems(defaultFile)
if args.test:
    doctest.testmod()
elif args.remove_first:
    pythonFunctions.writeToFile(pythonFunctions.editFileRemove(defaultFile, [0], items, defaultName), defaultFile)
elif args.remove is not None:
    pythonFunctions.writeToFile(pythonFunctions.editFileRemove(defaultFile, args.remove, items, defaultName),
                                defaultFile)
elif args.list:
    print("WorkItems: datum|vak|uitleg|aantal minuten")
    print("\n".join([str(s) for s in items]))
elif args.add:
    newElement = [WorkItem("{}|{}|{}|{}".format(args.date, args.course, args.description, args.time))]
    pythonFunctions.writeToFile(
        pythonFunctions.editFileAdd(defaultFile, getSortedWorkItems(defaultFile, newElement), defaultName), defaultFile)
elif args.week_total:
    print("\n".join(getWeekTotal(defaultFile)))
    #print("\n".join(getCourseTotal(defaultFile)))
else:
    parser.print_help()
