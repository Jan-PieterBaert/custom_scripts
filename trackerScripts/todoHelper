#!/bin/env python3
import doctest
import pythonFunctions
import argparse
import re
import time
from operator import attrgetter

defaultFile = "/fast_files/git_repos/personal_stuff/todo.md"
defaultName = "Calendar"

parser = argparse.ArgumentParser()

group1 = parser.add_mutually_exclusive_group()
group1.add_argument("--add", help="Add a new item", action="store_true")
group1.add_argument("--remove-first", help="Remove the first item making sure you want to remove it",
                    action="store_true")
group1.add_argument("--list", help="List all todos", action="store_true")
group1.add_argument("--remove", help="Remove the item at certain indices", type=int, nargs="*")
group1.add_argument("--remove-interactive", help="List all items and decide whether to remove or not",
                    action="store_true")

parser.add_argument("--test", help="Run the doctests to see if everything is still fine", action="store_true")
parser.add_argument("--date", help="The date of the todo")
parser.add_argument("--priority", help="The priority of the todo (0-4)", type=int)
parser.add_argument("--description", help="The description of the todo")
parser.add_argument("--category", help="The category of the todo")
args = parser.parse_args()


class TodoItem:
    """
    This is a class to represent a todoItem
    >>> TodoItem("| Din 26/2/2019 | 4 | Verjaardag | Varia |")
    Todoitem: "| Tue 26/02/2019 | 4 | Verjaardag | Varia |"
    >>> TodoItem("| Din 26/2/2019 | 4 | Verjaardag |")
    Traceback (most recent call last):
        ...
    AssertionError
    """

    def __init__(self, line):
        elements = list(filter(None, [element.strip() for element in line.strip().split("|")]))
        assert len(elements) == 4
        self._date = time.strptime(elements[0].split(" ")[-1], "%d/%m/%Y")
        self.prio = elements[1]
        assert 0 <= int(self.prio) <= 4
        self.description = elements[2]
        self.category = elements[3]

    def __eq__(self, other):
        """
        Compare 2 todoItems, equality is based on hash, because that is different for item which are not the same
        """
        return hash(self) == hash(other)

    def __hash__(self):
        """
        The hash value is the hash of the string, because the string differs for every instance which is different
        """
        return hash(str(self))

    def __repr__(self):
        return "Todoitem: \"{}\"".format(str(self))

    def __str__(self):
        return "| {} | {} | {} | {} |".format(self.datestr, self.prio, self.description, self.category)

    @property
    def datestr(self):
        return time.strftime("%a %d/%m/%Y", self._date)

    @property
    def date(self):
        return self._date


def getSortedTodos(fileName, newTodos=None):
    return sorted(pythonFunctions.getItems(fileName, TodoItem, defaultName, newTodos),
                  key=attrgetter("date", "prio", "category", "description"))


items = getSortedTodos(defaultFile)

if args.test:
    doctest.testmod()
elif args.remove_first:
    pythonFunctions.writeToFile(pythonFunctions.editFileRemove(defaultFile, [0], items, defaultName), defaultFile)
elif args.remove is not None:
    pythonFunctions.writeToFile(pythonFunctions.editFileRemove(defaultFile, args.remove, items, defaultName),
                                defaultFile)
elif args.list:
    print("Todos: datum|prio|uitleg|categorie")
    print("\n".join([str(s) for s in items]))
elif args.add:
    newElement = [TodoItem("{}|{}|{}|{}".format(args.date, args.prio, args.description, args.category))]
    pythonFunctions.writeToFile(
        pythonFunctions.editFileAdd(defaultFile, getSortedTodos(defaultFile, newElement), defaultName), defaultFile)
else:
    parser.print_help()
